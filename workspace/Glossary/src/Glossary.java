import java.util.Comparator;

import components.map.Map;
import components.map.Map1L;
import components.queue.Queue;
import components.queue.Queue1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Generate a list of terms in html each with their definition linked to other
 * existing terms.
 *
 * @author Michael Ma
 */
public final class Glossary {

    /**
     * Default constructor--private to prevent instantiation.
     */
    private Glossary() {
        // no code needed here
    }

    private static class Sort implements Comparator<String> {

        @Override
        public int compare(String o1, String o2) {
            return o1.compareTo(o2);
        }
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>Glossary Index</title> </head> <body>
     * <h2>Glossary</h2>
     * <hr>
     * <h3>Index</h3>
     * <ul>
     *
     * @param out
     *            the output stream
     * @updates out.content
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html> <head> <title>Glossary Index</title>");
        out.println("</head> <body>");
        out.println("<h2>Glossary</h2>");
        out.println("<hr>");
        out.println("<h3>Index</h3>");
        out.println("<ul>");
    }

    /**
     * Outputs the "list body" tags in the generated HTML file. These are the
     * expected elements generated repeatedly by this method:
     *
     * <li><a href="term link">term</a></li>
     *
     * @param out
     *            the output stream
     * @param termsQueue
     *            a queue of sorted terms
     * @updates out.content
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "list body" tags]
     */
    private static void outputList(Queue<String> termsQueue, SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        for (String term : termsQueue) {
            out.println("<li><a href=\"");
            out.println(term + ".html\">" + term);
            out.println("</a>");
        }
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>term</title> </head> <body>
     * <h2><b><i><font color="red">term</font></i></b></h2> <blockquote>
     *
     * @param out
     *            the output stream
     * @updates out.content
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputTermHeader(SimpleWriter out, String term) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html> <head> <title>" + term + "</title> </head> <body>");
        out.println("<h2><b><i><font color=\"red\">" + term
                + "</font></i></b></h2> <blockquote>");
    }

    /**
     * Outputs the definition in the generated HTML file. These are the expected
     * elements generated by this method:
     *
     * definition
     *
     * @param out
     *            the output stream
     * @updates out.content
     * @requires out.is_open
     * @ensures out.content = #out.content * [definition]
     */
    private static void outputTermDefinition(SimpleWriter out,
            String definition) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println(definition);
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </blockquote>
     * <hr>
     * <p>
     * Return to <a href="index.html">index</a>.
     * </p>
     * </body></html>
     *
     * @param out
     *            the output stream
     * @updates out.content
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputTermFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</blockquote>");
        out.println("<hr>");
        out.println("<p>");
        out.println("Return to <a href=\"index.html\">index</a>.");
        out.println("</p>");
        out.println("</body></html>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </ul>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.content
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</ul>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Returns the first "word" (maximal length string of characters not in
     * {@code separators}) or "separator string" (maximal length string of
     * characters in {@code separators}) in the given {@code text} starting at
     * the given {@code position}.
     *
     * @param text
     *            the {@code String} from which to get the word or separator
     *            string
     * @param position
     *            the starting index
     * @param separators
     *            the {@code Set} of separator characters
     * @return the first word or separator string found in {@code text} starting
     *         at index {@code position}
     * @requires 0 <= position < |text|
     * @ensures <pre>
     * nextWordOrSeparator =
     *   text[position, position + |nextWordOrSeparator|)  and
     * if entries(text[position, position + 1)) intersection separators = {}
     * then
     *   entries(nextWordOrSeparator) intersection separators = {}  and
     *   (position + |nextWordOrSeparator| = |text|  or
     *    entries(text[position, position + |nextWordOrSeparator| + 1))
     *      intersection separators /= {})
     * else
     *   entries(nextWordOrSeparator) is subset of separators  and
     *   (position + |nextWordOrSeparator| = |text|  or
     *    entries(text[position, position + |nextWordOrSeparator| + 1))
     *      is not subset of separators)
     * </pre>
     */
    private static String nextWordOrSeparator(String text, int position,
            Set<Character> separators) {
        assert text != null : "Violation of: text is not null";
        assert separators != null : "Violation of: separators is not null";
        assert 0 <= position : "Violation of: 0 <= position";
        assert position < text.length() : "Violation of: position < |text|";

        char p = text.charAt(position);
        String result = "";
        result += p;
        position++;
        if (!separators.contains(p)) {
            while (position < text.length() && !separators.contains(p)) {
                p = text.charAt(position);
                if (!separators.contains(p)) {
                    result += p;
                }
                position++;
            }
        } else {
            while (position < text.length() && separators.contains(p)) {
                p = text.charAt(position);
                if (separators.contains(p)) {
                    result += p;
                }
                position++;
            }
        }
        /*
         * This line added just to make the program compilable. Should be
         * replaced with appropriate return statement.
         */
        return result;
    }

    /*
     * Check every word in definition, if the word is also a term, add url.
     *
     * @param termsMap a map with terms and their definition
     *
     * @param termsQueue a queue of sorted terms
     *
     * @updates termsMap update definition in termsMap with added url.
     */
    private static void formatDefinition(Map<String, String> termsMap,
            Queue<String> termsQueue) {
        Queue<String> temp = new Queue1L<>();
        Set<Character> separators = new Set1L<>();
        separators.add(' ');
        separators.add('.');
        separators.add(',');
        separators.add('/');
        separators.add(':');
        separators.add(';');
        separators.add('\'');
        separators.add('?');
        separators.add('!');
        separators.add('\t');

        int position = 0;

        while (termsQueue.length() > 0) {
            String term = termsQueue.dequeue();
            temp.enqueue(term);

            String definition = termsMap.value(term);
            String result = "";
            // NextWordOrSeparator
            while (position < definition.length()) {
                String token = nextWordOrSeparator(definition, position,
                        separators);
                // Check for term
                if (termsMap.hasKey(token)) {
                    result += "<a href=\"" + token + ".html\">" + token
                            + "</a>";
                } else {
                    result += token;
                }
                position += token.length();
            }
            // update definition
            termsMap.replaceValue(term, result);
            position = 0;
        }
        termsQueue.transferFrom(temp);
    }

    /**
     * Get terms and definitions from a file.
     *
     * @param termsMap
     *            a map for terms and definitions
     * @param in
     *            reader with input file
     * @updates termsMap
     * @requires in.isOpen
     * @ensures queue contain every term and their definition
     */
    private static Queue<String> createTermsQueue(Map<String, String> termsMap,
            SimpleReader in) {
        Queue<String> termsQueue = new Queue1L<>();

        while (!in.atEOS()) {
            // Get term and definition
            String term = in.nextLine();
            String definition = in.nextLine();
            // Check if next line if blank and move on.
            String temp = " ";
            while (!in.atEOS() && temp.length() > 0) {
                temp = in.nextLine();
                if (temp.length() >= 1 && !temp.equals(" ")) {
                    definition += temp;
                }
            }
            // add to map and queue
            termsMap.add(term, definition);
            termsQueue.enqueue(term);
        }
        return termsQueue;
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        // input and outputs
        SimpleReader cmIn = new SimpleReader1L();
        SimpleWriter cmOut = new SimpleWriter1L();

        cmOut.print("Please enter name of input file: ");
        String file = cmIn.nextLine();

        cmOut.print("Please enter folder for output files: ");
        String folder = cmIn.nextLine();

        cmIn.close();
        cmOut.close();

        SimpleReader in = new SimpleReader1L(file);
        SimpleWriter out = new SimpleWriter1L(folder + "/index.html");

        // storing terms and sort
        Map<String, String> termsMap = new Map1L<>();
        Queue<String> termsQueue = createTermsQueue(termsMap, in);

        Comparator<String> az = new Sort();
        termsQueue.sort(az);
        formatDefinition(termsMap, termsQueue);

        // output
        outputHeader(out);
        outputList(termsQueue, out);
        outputFooter(out);
        in.close();
        out.close();

        for (String term : termsQueue) {
            SimpleWriter termOut = new SimpleWriter1L(
                    folder + "/" + term + ".html");
            outputTermHeader(termOut, term);
            outputTermDefinition(termOut, termsMap.value(term));
            outputTermFooter(termOut);
            termOut.close();
        }
    }

}
