import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Michael Ma
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * TODO: fill in body
         */
        /*
         * title, link, description all required. Label of title and description
         * can be optional.
         */
        String title, description, channelLink;
        if (channel.child(getChildElement(channel, "title"))
                .numberOfChildren() == 0) {
            title = "Empty Title";
        } else {
            title = channel.child(getChildElement(channel, "title")).child(0)
                    .label();
        }

        if (channel.child(getChildElement(channel, "link"))
                .numberOfChildren() == 0) {
            description = "Empty Description";
        } else {
            description = channel.child(getChildElement(channel, "description"))
                    .child(0).label();
        }

        channelLink = channel.child(getChildElement(channel, "link")).child(0)
                .label();

        // output
        out.println("<html> <head> <title>" + title + "</title>");
        out.println("</head> <body>");
        out.println(
                "<h1> <a href='" + channelLink + "'>" + title + "</a></h1>");
        out.println("<p>" + description + "</p>");
        out.println(
                "<table border=\"1\"><tr><th>Date</th><th>Source</th><th>News</th></tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * TODO: fill in body
         */
        // output
        out.println("</table></body> </html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        /*
         * TODO: fill in body
         */
        int index = -1;
        boolean indexed = false;
        int i = 0;
        while (!indexed && i < xml.numberOfChildren()) {
            if (xml.child(i).isTag() && xml.child(i).label().equals(tag)
                    && !indexed) {
                index = i;
                indexed = true;
            }
            i++;
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * TODO: fill in body
         */
        // label required, if parent present
        if (getChildElement(item, "pubDate") == -1) {
            out.println("<tr><th>No date available</th>");
        } else {
            out.println(
                    "<tr><th>" + item.child(getChildElement(item, "pubDate"))
                            .child(0).label() + "</th>");
        }
        // url required if tag exists, label not required
        if (getChildElement(item, "source") == -1) {
            out.println("<th>No source available</th>");
        } else {
            String sourceString;
            if (item.child(getChildElement(item, "source"))
                    .numberOfChildren() > 0) {
                sourceString = item.child(getChildElement(item, "source"))
                        .child(0).label();
            } else {
                sourceString = "No source available";
            }
            out.println("<th><a href='"
                    + item.child(getChildElement(item, "source"))
                            .attributeValue("url")
                    + "'>" + item.child(getChildElement(item, "source"))
                            .child(0).label()
                    + "</a></th>");
        }

        /*
         * at least one title or description exists. Label is not required.
         */
        String titleString, linkString;
        if (getChildElement(item, "title") != -1) {
            if (item.child(getChildElement(item, "title"))
                    .numberOfChildren() > 0) {
                titleString = item.child(getChildElement(item, "title"))
                        .child(0).label();
            } else {
                titleString = "No title available";
            }
        } else if (getChildElement(item, "description") != -1) {
            if (item.child(getChildElement(item, "description"))
                    .numberOfChildren() > 0) {
                titleString = item.child(getChildElement(item, "description"))
                        .child(0).label();
            } else {
                titleString = "No description available";
            }
        } else {
            titleString = "No title or description available";
        }
        // label required if parent exists.
        if (getChildElement(item, "link") == -1) {
            linkString = "";
        } else {
            /*
             * However, the <item>'s children <link> and <pubDate>, if present,
             * are required to have a child with the needed information.
             */
            linkString = item.child(getChildElement(item, "link")).child(0)
                    .label();
        }

        out.println("<th><a href='" + linkString + "'>" + titleString
                + "</a></th></tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        /*
         * TODO: fill in body
         */
        out.println("Enter the URL of an RSS 2.0 news feed: ");
        String url = in.nextLine();
        out.println("Enter the output file name:");
        String fileName = in.nextLine();
        SimpleWriter outHTML = new SimpleWriter1L(fileName);
        /*
         * Read XML input and initialize XMLTree. If input is not legal XML,
         * this statement will fail.
         */
        XMLTree xml = new XMLTree1(url);
        if (xml.label().equals("rss")
                && xml.attributeValue("version").equals("2.0")) {
            /*
             * Extract <channel> element.
             */
            XMLTree channel = xml.child(0);

            outputHeader(channel, outHTML);

            for (int i = 0; i < channel.numberOfChildren(); i++) {
                if (channel.child(i).label().equals("item")) {
                    processItem(channel.child(i), outHTML);
                }
            }

            outputFooter(outHTML);
        } else {
            out.println("Invalid RSS link.");
        }

        in.close();
        out.close();
        outHTML.close();
    }

}